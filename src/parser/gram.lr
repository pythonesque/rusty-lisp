grammar {
    use {Checkable, Context, Inferable, Info, Name};
    use Inferable::*;
    use Checkable::*;
    use Name::*;
    use parser::{de_bruijn_down, Tok, Stmt};
    use parser::Stmt::*;
    use std::collections::VecDeque;

    token Tok where {
        "(" => "LParen";
        ")" => "RParen";
        "->" => "Arrow";
        "fn" => "Lambda";
        ":" => "Colon";
        "*" => "Star";
        "pi" => "Pi";
        "assume" => "Assume";
        "let" => "Let";
        "=" => "Eq";
    };

    pub S = Stmt;

    Stmt: Stmt = {
        "assume" ~Context => Decl(~~);
        "let" n:"Ident" "=" e:Expr => Bind(n.as_ident(), e);
        ~Expr => Expr(~~);
    };

    Info: Info = ~Type => ::eval_down(~~, VecDeque::new());

    Binding: (Name, Info) = n:"Ident" ":" i:Info => (Global(n.as_ident()), i);

    BindingList: Context = {
        "(" ~Binding ")" => {
            let mut v = VecDeque::new();
            v.push_front(~~);
            v
        };
        v:BindingList "(" b:Binding ")" => {
            let mut v = v;
            v.push_front(b);
            v
        };
    };

    Context = {
        ~Binding => {
            let mut v = VecDeque::new();
            v.push_front(~~);
            v
        };
        BindingList;
    };

    Type: Checkable = {
        AtomCheck;
        t1:AtomCheck "->" t2:Type => Inf(Box::new(Pi(t1, t2)));
    };

    Expr: Inferable = {
        Inf;
    };

    Inf: Inferable = {
        AtomInf;
        i:Inf c:AtomCheck => App(Box::new(i), c);
        c:AtomCheck ":" t:Type => Ann(c, t);
        e:Inf c:AtomCheck ":" t:Type => Ann(Inf(Box::new(App(Box::new(e), c))), t);
    };

    AtomInf: Inferable = {
        ~"Ident" => Free(Global(~~.as_ident()));
        "(" ~Inf ")";
        "*" => Star;
        "pi" "(" d:"Ident" ":" t:Type ")" "->" c:AtomCheck => Pi(t, de_bruijn_down(Global(d.as_ident()), 0, c));
    };

    AtomCheck: Checkable = {
        ~AtomInf => Inf(Box::new(~~));
        "(" t1:AtomCheck "->" t2:Type ")" => Inf(Box::new(Pi(t1, t2)));
        "(" ~Check ")";
    };

    Check: Checkable = {
        "fn" i:"Ident" "->" c:Check => Lam(Box::new(de_bruijn_down(Global(i.as_ident()), 0, c)));
        "fn" d:"Ident" "->" i:Inf => Lam(Box::new(de_bruijn_down(Global(d.as_ident()), 0, Inf(Box::new(i)))));
    };
}
